{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Configuration",
      "description": "Initialize the React TypeScript project with Tailwind CSS and required dependencies",
      "details": "1. Create a new React project with TypeScript using Create React App or Vite\n2. Install and configure Tailwind CSS 3.0+\n3. Set up project structure with directories for components, hooks, utils, and types\n4. Install required dependencies: React Hook Form 7.0+, React-PDF 6.0+\n5. Configure ESLint and Prettier for code quality\n6. Set up basic routing structure\n7. Initialize Git repository\n\nExample setup commands:\n```bash\n# Using Vite\nnpm create vite@latest rental-application-form -- --template react-ts\ncd rental-application-form\nnpm install\n\n# Install dependencies\nnpm install react-hook-form @hookform/resolvers yup react-pdf tailwindcss postcss autoprefixer\n\n# Initialize Tailwind CSS\nnpx tailwindcss init -p\n\n# Additional dependencies\nnpm install react-router-dom\n```",
      "testStrategy": "1. Verify all dependencies are correctly installed and configured\n2. Ensure the application builds without errors\n3. Confirm Tailwind CSS is working by testing basic styling\n4. Validate TypeScript configuration\n5. Test basic routing functionality",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Initialize React TypeScript Project",
          "description": "Create a new React project with TypeScript using Vite and initialize Git repository",
          "dependencies": [],
          "details": "Run 'npm create vite@latest rental-application-form -- --template react-ts' to create the project. Navigate to the project directory with 'cd rental-application-form' and run 'npm install' to install core dependencies. Initialize Git with 'git init', create .gitignore file with node_modules and build directories, and make initial commit.",
          "status": "pending",
          "testStrategy": "Verify the project builds successfully with 'npm run dev' and check that TypeScript compilation works without errors"
        },
        {
          "id": 2,
          "title": "Install and Configure Tailwind CSS",
          "description": "Add Tailwind CSS to the project and configure it properly",
          "dependencies": [
            1
          ],
          "details": "Install Tailwind and its dependencies with 'npm install tailwindcss postcss autoprefixer'. Initialize Tailwind with 'npx tailwindcss init -p'. Configure content paths in tailwind.config.js to include './src/**/*.{js,jsx,ts,tsx}'. Add Tailwind directives to main CSS file: '@tailwind base; @tailwind components; @tailwind utilities;'. Create a simple component to test Tailwind classes.",
          "status": "pending",
          "testStrategy": "Create a test component with Tailwind classes and verify the styles are applied correctly"
        },
        {
          "id": 3,
          "title": "Set Up Project Structure and Install Dependencies",
          "description": "Create directory structure and install required third-party libraries",
          "dependencies": [
            2
          ],
          "details": "Create directories: src/components, src/hooks, src/utils, src/types, src/pages, src/assets. Install required dependencies: 'npm install react-hook-form @hookform/resolvers yup react-pdf react-router-dom'. Create index.ts files in each directory to facilitate imports. Set up basic type definitions in src/types for project-wide use.",
          "status": "pending",
          "testStrategy": "Verify all dependencies are correctly installed by importing them in a test file"
        },
        {
          "id": 4,
          "title": "Configure ESLint and Prettier",
          "description": "Set up code quality tools for consistent formatting and error checking",
          "dependencies": [
            3
          ],
          "details": "Install ESLint and Prettier: 'npm install -D eslint prettier eslint-config-prettier eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/eslint-plugin @typescript-eslint/parser'. Create configuration files: .eslintrc.js, .prettierrc, and .editorconfig. Configure ESLint to work with TypeScript and React. Add lint scripts to package.json: 'lint': 'eslint \"src/**/*.{ts,tsx}\"' and 'format': 'prettier --write \"src/**/*.{ts,tsx}\"'.",
          "status": "pending",
          "testStrategy": "Run lint and format commands to verify they work correctly on the existing codebase"
        },
        {
          "id": 5,
          "title": "Implement Basic Routing Structure",
          "description": "Set up React Router with basic routes for the application",
          "dependencies": [
            3
          ],
          "details": "Create a basic router setup in src/App.tsx using React Router v6. Define routes for main pages: home, application form, success page, etc. Create placeholder components for each route in src/pages directory. Implement a basic layout component with header/footer that wraps all routes. Set up navigation between routes with Link components. Test that routing works by navigating between pages.",
          "status": "pending",
          "testStrategy": "Manually test navigation between routes and verify that the correct components render for each route"
        }
      ]
    },
    {
      "id": 2,
      "title": "Implement Core Form Structure and Navigation",
      "description": "Create the multi-step form structure with navigation and progress tracking",
      "details": "1. Create a form context provider to manage form state across steps\n2. Implement multi-step form container component\n3. Create navigation controls (previous, next, save buttons)\n4. Implement progress indicator component\n5. Set up form step routing and navigation logic\n6. Create layout components for consistent form styling\n\nExample form context implementation:\n```typescript\ninterface FormContextType {\n  formData: FormData;\n  updateFormData: (section: string, data: any) => void;\n  currentStep: number;\n  totalSteps: number;\n  goToStep: (step: number) => void;\n  nextStep: () => void;\n  prevStep: () => void;\n}\n\nconst FormContext = createContext<FormContextType | undefined>(undefined);\n\nexport const FormProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {\n  const [formData, setFormData] = useState<FormData>({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 5; // Total number of form sections\n  \n  const updateFormData = (section: string, data: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        ...data\n      }\n    }));\n  };\n  \n  // Navigation methods\n  const goToStep = (step: number) => {\n    if (step > 0 && step <= totalSteps) {\n      setCurrentStep(step);\n    }\n  };\n  \n  const nextStep = () => goToStep(currentStep + 1);\n  const prevStep = () => goToStep(currentStep - 1);\n  \n  return (\n    <FormContext.Provider value={{\n      formData,\n      updateFormData,\n      currentStep,\n      totalSteps,\n      goToStep,\n      nextStep,\n      prevStep\n    }}>\n      {children}\n    </FormContext.Provider>\n  );\n};\n```",
      "testStrategy": "1. Test navigation between form steps\n2. Verify progress indicator updates correctly\n3. Ensure form context properly maintains state between steps\n4. Test responsive layout on different screen sizes\n5. Validate accessibility of navigation controls\n6. Test keyboard navigation functionality",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Implement Personal Information Section",
      "description": "Create the Personal Information form section with all required fields and validation",
      "details": "1. Create form fields based on the PersonalInfo interface\n2. Implement form validation using React Hook Form and Yup\n3. Create reusable form field components (text input, date picker, etc.)\n4. Implement error handling and display\n5. Connect to form context for state management\n\nExample implementation:\n```typescript\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useFormContext } from '../context/FormContext';\n\nconst personalInfoSchema = yup.object({\n  firstName: yup.string().required('First name is required'),\n  middleName: yup.string(),\n  lastName: yup.string().required('Last name is required'),\n  dateOfBirth: yup.date().required('Date of birth is required').max(new Date(), 'Date cannot be in the future'),\n  email: yup.string().email('Invalid email format').required('Email is required'),\n  phone: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Phone number is required'),\n  currentAddress: yup.object({\n    street: yup.string().required('Street address is required'),\n    city: yup.string().required('City is required'),\n    state: yup.string().required('State is required'),\n    zipCode: yup.string().matches(/^[0-9]{5}(-[0-9]{4})?$/, 'Invalid ZIP code format').required('ZIP code is required')\n  }),\n  ssn: yup.string().matches(/^[0-9]{3}-[0-9]{2}-[0-9]{4}$/, 'Invalid SSN format'),\n  idNumber: yup.string().required('ID number is required')\n});\n\nconst PersonalInfoForm = () => {\n  const { formData, updateFormData } = useFormContext();\n  \n  const { register, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(personalInfoSchema),\n    defaultValues: formData.personalInfo || {}\n  });\n  \n  const onSubmit = (data) => {\n    updateFormData('personalInfo', data);\n    // Navigate to next step\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Form fields */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <TextField\n          label=\"First Name\"\n          {...register('firstName')}\n          error={errors.firstName?.message}\n        />\n        {/* Additional fields */}\n      </div>\n      <div className=\"mt-4 flex justify-between\">\n        <Button type=\"button\" variant=\"secondary\">Previous</Button>\n        <Button type=\"submit\">Next</Button>\n      </div>\n    </form>\n  );\n};\n```",
      "testStrategy": "1. Test form validation for all required fields\n2. Verify error messages display correctly\n3. Test data persistence when navigating between steps\n4. Validate date formatting and validation\n5. Test form submission with valid and invalid data\n6. Verify accessibility of form controls",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Employment Information Section",
      "description": "Create the Employment Information form section with all required fields and validation",
      "details": "1. Create form fields based on the EmploymentInfo interface\n2. Implement form validation using React Hook Form and Yup\n3. Create specialized input components for currency and date fields\n4. Implement conditional fields for previous employment\n5. Connect to form context for state management\n\nExample implementation:\n```typescript\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useFormContext } from '../context/FormContext';\n\nconst employmentInfoSchema = yup.object({\n  employer: yup.string().required('Employer name is required'),\n  position: yup.string().required('Position is required'),\n  monthlyIncome: yup.number().positive('Income must be positive').required('Monthly income is required'),\n  startDate: yup.date().required('Start date is required').max(new Date(), 'Date cannot be in the future'),\n  contactInfo: yup.object({\n    name: yup.string().required('Contact name is required'),\n    phone: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Contact phone is required'),\n    email: yup.string().email('Invalid email format')\n  }),\n  previousEmployer: yup.object({\n    name: yup.string(),\n    position: yup.string(),\n    startDate: yup.date(),\n    endDate: yup.date(),\n    contactInfo: yup.object({\n      name: yup.string(),\n      phone: yup.string(),\n      email: yup.string().email('Invalid email format')\n    })\n  })\n});\n\nconst EmploymentInfoForm = () => {\n  const { formData, updateFormData, nextStep, prevStep } = useFormContext();\n  \n  const { register, handleSubmit, formState: { errors }, watch } = useForm({\n    resolver: yupResolver(employmentInfoSchema),\n    defaultValues: formData.employmentInfo || {}\n  });\n  \n  const onSubmit = (data) => {\n    updateFormData('employmentInfo', data);\n    nextStep();\n  };\n  \n  const hasPreviousEmployer = watch('hasPreviousEmployer');\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Form fields */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <TextField\n          label=\"Employer\"\n          {...register('employer')}\n          error={errors.employer?.message}\n        />\n        <CurrencyField\n          label=\"Monthly Income\"\n          {...register('monthlyIncome')}\n          error={errors.monthlyIncome?.message}\n        />\n        {/* Additional fields */}\n      </div>\n      \n      <div className=\"mt-4\">\n        <Checkbox\n          label=\"I have previous employment to report\"\n          {...register('hasPreviousEmployer')}\n        />\n      </div>\n      \n      {hasPreviousEmployer && (\n        <div className=\"mt-4 p-4 border rounded\">\n          <h3 className=\"text-lg font-medium\">Previous Employment</h3>\n          {/* Previous employer fields */}\n        </div>\n      )}\n      \n      <div className=\"mt-4 flex justify-between\">\n        <Button type=\"button\" variant=\"secondary\" onClick={prevStep}>Previous</Button>\n        <Button type=\"submit\">Next</Button>\n      </div>\n    </form>\n  );\n};\n```",
      "testStrategy": "1. Test form validation for all required fields\n2. Verify conditional rendering of previous employment section\n3. Test currency input formatting and validation\n4. Validate date range validation for employment dates\n5. Test data persistence when navigating between steps\n6. Verify accessibility of form controls",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Rental History Section",
      "description": "Create the Rental History form section with all required fields and validation",
      "details": "1. Create form fields based on the RentalHistory interface\n2. Implement form validation using React Hook Form and Yup\n3. Create dynamic form array for previous addresses\n4. Implement add/remove functionality for previous addresses\n5. Connect to form context for state management\n\nExample implementation:\n```typescript\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useFormContext } from '../context/FormContext';\n\nconst rentalHistorySchema = yup.object({\n  currentLandlord: yup.object({\n    name: yup.string().required('Landlord name is required'),\n    phone: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Landlord phone is required'),\n    email: yup.string().email('Invalid email format')\n  }),\n  currentRent: yup.number().positive('Rent must be positive').required('Current rent is required'),\n  moveReason: yup.string().required('Reason for moving is required'),\n  previousAddresses: yup.array().of(\n    yup.object({\n      street: yup.string().required('Street address is required'),\n      city: yup.string().required('City is required'),\n      state: yup.string().required('State is required'),\n      zipCode: yup.string().matches(/^[0-9]{5}(-[0-9]{4})?$/, 'Invalid ZIP code format').required('ZIP code is required'),\n      startDate: yup.date().required('Start date is required'),\n      endDate: yup.date().required('End date is required'),\n      landlordName: yup.string().required('Previous landlord name is required'),\n      landlordPhone: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Previous landlord phone is required')\n    })\n  )\n});\n\nconst RentalHistoryForm = () => {\n  const { formData, updateFormData, nextStep, prevStep } = useFormContext();\n  \n  const { register, control, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(rentalHistorySchema),\n    defaultValues: formData.rentalHistory || {\n      previousAddresses: [{}]\n    }\n  });\n  \n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'previousAddresses'\n  });\n  \n  const onSubmit = (data) => {\n    updateFormData('rentalHistory', data);\n    nextStep();\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h3 className=\"text-lg font-medium\">Current Landlord Information</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Current landlord fields */}\n      </div>\n      \n      <h3 className=\"text-lg font-medium mt-6\">Previous Addresses</h3>\n      {fields.map((field, index) => (\n        <div key={field.id} className=\"mt-4 p-4 border rounded\">\n          <div className=\"flex justify-between items-center\">\n            <h4 className=\"font-medium\">Previous Address {index + 1}</h4>\n            {index > 0 && (\n              <Button \n                type=\"button\" \n                variant=\"danger\" \n                onClick={() => remove(index)}\n              >\n                Remove\n              </Button>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n            {/* Previous address fields */}\n          </div>\n        </div>\n      ))}\n      \n      <Button \n        type=\"button\" \n        variant=\"secondary\" \n        className=\"mt-4\" \n        onClick={() => append({})}\n      >\n        Add Previous Address\n      </Button>\n      \n      <div className=\"mt-6 flex justify-between\">\n        <Button type=\"button\" variant=\"secondary\" onClick={prevStep}>Previous</Button>\n        <Button type=\"submit\">Next</Button>\n      </div>\n    </form>\n  );\n};\n```",
      "testStrategy": "1. Test form validation for all required fields\n2. Verify dynamic addition and removal of previous addresses\n3. Test date range validation for residence periods\n4. Validate phone number and email formatting\n5. Test data persistence when navigating between steps\n6. Verify accessibility of form controls\n7. Test form submission with varying numbers of previous addresses",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Financial Information and Additional Information Sections",
      "description": "Create the Financial Information and Additional Information form sections with all required fields and validation",
      "details": "1. Create form fields based on the FinancialInfo and AdditionalInfo interfaces\n2. Implement form validation using React Hook Form and Yup\n3. Create dynamic form array for pets in Additional Information\n4. Implement conditional fields based on user selections\n5. Connect to form context for state management\n\nExample implementation for Financial Information:\n```typescript\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useFormContext } from '../context/FormContext';\n\nconst financialInfoSchema = yup.object({\n  bankName: yup.string().required('Bank name is required'),\n  accountType: yup.string().required('Account type is required'),\n  monthlyExpenses: yup.number().positive('Expenses must be positive').required('Monthly expenses are required'),\n  outstandingDebts: yup.number().min(0, 'Debts cannot be negative').required('Outstanding debts are required'),\n  creditScore: yup.string().required('Credit score range is required')\n});\n\nconst FinancialInfoForm = () => {\n  const { formData, updateFormData, nextStep, prevStep } = useFormContext();\n  \n  const { register, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(financialInfoSchema),\n    defaultValues: formData.financialInfo || {}\n  });\n  \n  const onSubmit = (data) => {\n    updateFormData('financialInfo', data);\n    nextStep();\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <TextField\n          label=\"Bank Name\"\n          {...register('bankName')}\n          error={errors.bankName?.message}\n        />\n        <SelectField\n          label=\"Account Type\"\n          {...register('accountType')}\n          error={errors.accountType?.message}\n          options={[\n            { value: 'checking', label: 'Checking' },\n            { value: 'savings', label: 'Savings' },\n            { value: 'both', label: 'Both Checking & Savings' }\n          ]}\n        />\n        {/* Additional fields */}\n      </div>\n      \n      <div className=\"mt-4 flex justify-between\">\n        <Button type=\"button\" variant=\"secondary\" onClick={prevStep}>Previous</Button>\n        <Button type=\"submit\">Next</Button>\n      </div>\n    </form>\n  );\n};\n```\n\nExample implementation for Additional Information:\n```typescript\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useFormContext } from '../context/FormContext';\n\nconst additionalInfoSchema = yup.object({\n  occupants: yup.number().min(1, 'Must have at least 1 occupant').required('Number of occupants is required'),\n  pets: yup.array().of(\n    yup.object({\n      type: yup.string().required('Pet type is required'),\n      breed: yup.string().when('type', {\n        is: (val) => val === 'dog' || val === 'cat',\n        then: yup.string().required('Breed is required')\n      }),\n      weight: yup.number().positive('Weight must be positive').required('Weight is required')\n    })\n  ),\n  smokingStatus: yup.boolean().required('Smoking status is required'),\n  specialRequirements: yup.string(),\n  emergencyContact: yup.object({\n    name: yup.string().required('Emergency contact name is required'),\n    relationship: yup.string().required('Relationship is required'),\n    phone: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Emergency contact phone is required')\n  })\n});\n\nconst AdditionalInfoForm = () => {\n  const { formData, updateFormData, prevStep } = useFormContext();\n  \n  const { register, control, handleSubmit, formState: { errors }, watch } = useForm({\n    resolver: yupResolver(additionalInfoSchema),\n    defaultValues: formData.additionalInfo || {\n      pets: []\n    }\n  });\n  \n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'pets'\n  });\n  \n  const hasPets = watch('hasPets');\n  \n  const onSubmit = (data) => {\n    updateFormData('additionalInfo', data);\n    // Navigate to review page\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Form fields */}\n      \n      <div className=\"mt-4\">\n        <Checkbox\n          label=\"I have pets\"\n          {...register('hasPets')}\n        />\n      </div>\n      \n      {hasPets && (\n        <div className=\"mt-4\">\n          {fields.map((field, index) => (\n            <div key={field.id} className=\"mt-2 p-4 border rounded\">\n              {/* Pet fields */}\n            </div>\n          ))}\n          \n          <Button \n            type=\"button\" \n            variant=\"secondary\" \n            className=\"mt-2\" \n            onClick={() => append({})}\n          >\n            Add Pet\n          </Button>\n        </div>\n      )}\n      \n      <div className=\"mt-6 flex justify-between\">\n        <Button type=\"button\" variant=\"secondary\" onClick={prevStep}>Previous</Button>\n        <Button type=\"submit\">Review Application</Button>\n      </div>\n    </form>\n  );\n};\n```",
      "testStrategy": "1. Test form validation for all required fields\n2. Verify conditional rendering of pet information section\n3. Test dynamic addition and removal of pets\n4. Validate numeric inputs for financial information\n5. Test data persistence when navigating between steps\n6. Verify accessibility of form controls\n7. Test conditional validation based on user selections",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Auto-Save Functionality",
      "description": "Create a system to automatically save form progress to localStorage",
      "details": "1. Create a custom hook to handle localStorage interactions\n2. Implement auto-save functionality in the form context\n3. Add debouncing to prevent excessive saves\n4. Implement form state restoration on page load\n5. Add manual save functionality\n6. Create user notifications for save status\n\nExample implementation:\n```typescript\nimport { useState, useEffect, useCallback } from 'react';\n\n// Custom hook for localStorage\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  // Get from localStorage then parse stored json or return initialValue\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    \n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n  \n  // State to store our value\n  const [storedValue, setStoredValue] = useState(readValue);\n  \n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = useCallback((value: any) => {\n    if (typeof window === 'undefined') {\n      console.warn(`Tried setting localStorage key \"${key}\" even though environment is not a client`);\n    }\n    \n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Save to state\n      setStoredValue(valueToStore);\n      \n      // Save to localStorage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n  \n  // Listen for changes to this localStorage key in other documents\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue) {\n        setStoredValue(JSON.parse(e.newValue));\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key]);\n  \n  return [storedValue, setValue];\n};\n\n// Enhanced FormProvider with auto-save\nexport const FormProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {\n  const [formData, setFormData] = useLocalStorage('rentalApplicationForm', {});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n  const totalSteps = 5;\n  \n  // Debounced save function\n  const debouncedSave = useCallback(\n    debounce((data) => {\n      setSaveStatus('saving');\n      try {\n        setFormData(data);\n        setSaveStatus('saved');\n        \n        // Reset status after 3 seconds\n        setTimeout(() => setSaveStatus('idle'), 3000);\n      } catch (error) {\n        setSaveStatus('error');\n      }\n    }, 1000),\n    [setFormData]\n  );\n  \n  const updateFormData = (section: string, data: any) => {\n    const newFormData = {\n      ...formData,\n      [section]: {\n        ...formData[section],\n        ...data\n      }\n    };\n    \n    // Update state immediately for UI responsiveness\n    setFormData(newFormData);\n    \n    // Trigger debounced save\n    debouncedSave(newFormData);\n  };\n  \n  // Manual save function\n  const saveFormData = () => {\n    setSaveStatus('saving');\n    try {\n      setFormData(formData);\n      setSaveStatus('saved');\n      \n      // Reset status after 3 seconds\n      setTimeout(() => setSaveStatus('idle'), 3000);\n    } catch (error) {\n      setSaveStatus('error');\n    }\n  };\n  \n  // Navigation methods\n  const goToStep = (step: number) => {\n    if (step > 0 && step <= totalSteps) {\n      setCurrentStep(step);\n    }\n  };\n  \n  const nextStep = () => goToStep(currentStep + 1);\n  const prevStep = () => goToStep(currentStep - 1);\n  \n  return (\n    <FormContext.Provider value={{\n      formData,\n      updateFormData,\n      saveFormData,\n      saveStatus,\n      currentStep,\n      totalSteps,\n      goToStep,\n      nextStep,\n      prevStep\n    }}>\n      {children}\n    </FormContext.Provider>\n  );\n};\n\n// Helper function for debouncing\nfunction debounce(func: Function, wait: number) {\n  let timeout: ReturnType<typeof setTimeout>;\n  return function executedFunction(...args: any[]) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n```",
      "testStrategy": "1. Test auto-save functionality by making form changes and verifying localStorage updates\n2. Verify form state restoration on page reload\n3. Test debouncing by making rapid changes and ensuring only one save occurs\n4. Verify save status notifications appear and disappear correctly\n5. Test manual save functionality\n6. Simulate storage errors and verify error handling\n7. Test storage event handling for multi-tab scenarios",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        4,
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement PDF Generation and Print Functionality",
      "description": "Create functionality to generate a PDF of the completed application and enable printing",
      "details": "1. Create a review page to display all form data\n2. Implement PDF generation using React-PDF\n3. Create PDF template with styling\n4. Add print functionality using browser Print API\n5. Implement download functionality for the generated PDF\n\nExample implementation:\n```typescript\nimport { useState } from 'react';\nimport { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';\nimport { useFormContext } from '../context/FormContext';\n\n// Define PDF styles\nconst styles = StyleSheet.create({\n  page: {\n    padding: 30,\n    fontFamily: 'Helvetica'\n  },\n  section: {\n    marginBottom: 10\n  },\n  heading: {\n    fontSize: 18,\n    marginBottom: 10,\n    fontWeight: 'bold'\n  },\n  subheading: {\n    fontSize: 14,\n    marginBottom: 5,\n    fontWeight: 'bold'\n  },\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5\n  },\n  label: {\n    width: '30%',\n    fontWeight: 'bold'\n  },\n  value: {\n    width: '70%'\n  }\n});\n\n// PDF Document component\nconst RentalApplicationPDF = ({ formData }) => (\n  <Document>\n    <Page size=\"A4\" style={styles.page}>\n      <View style={styles.section}>\n        <Text style={styles.heading}>Rental Application</Text>\n      </View>\n      \n      <View style={styles.section}>\n        <Text style={styles.subheading}>Personal Information</Text>\n        <View style={styles.row}>\n          <Text style={styles.label}>Name:</Text>\n          <Text style={styles.value}>\n            {formData.personalInfo?.firstName} {formData.personalInfo?.middleName} {formData.personalInfo?.lastName}\n          </Text>\n        </View>\n        {/* Additional personal info fields */}\n      </View>\n      \n      {/* Additional sections for employment, rental history, etc. */}\n    </Page>\n  </Document>\n);\n\n// Review and PDF generation component\nconst ReviewAndGenerate = () => {\n  const { formData, prevStep } = useFormContext();\n  const [isPdfReady, setIsPdfReady] = useState(false);\n  \n  const handlePrint = () => {\n    window.print();\n  };\n  \n  return (\n    <div className=\"print-container\">\n      <div className=\"print-only-hide mb-4 flex justify-between items-center\">\n        <h2 className=\"text-xl font-bold\">Review Your Application</h2>\n        <div className=\"flex space-x-2\">\n          <Button type=\"button\" onClick={handlePrint}>\n            Print\n          </Button>\n          <PDFDownloadLink\n            document={<RentalApplicationPDF formData={formData} />}\n            fileName=\"rental-application.pdf\"\n            className=\"btn btn-primary\"\n            onLoadSuccess={() => setIsPdfReady(true)}\n          >\n            {({ blob, url, loading, error }) =>\n              loading ? 'Generating PDF...' : 'Download PDF'\n            }\n          </PDFDownloadLink>\n          <Button type=\"button\" variant=\"secondary\" onClick={prevStep}>\n            Back to Form\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"application-review\">\n        {/* Render all form sections for review */}\n        <div className=\"section\">\n          <h3 className=\"text-lg font-bold mb-2\">Personal Information</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <p className=\"font-medium\">Full Name</p>\n              <p>\n                {formData.personalInfo?.firstName} {formData.personalInfo?.middleName} {formData.personalInfo?.lastName}\n              </p>\n            </div>\n            {/* Additional fields */}\n          </div>\n        </div>\n        \n        {/* Additional review sections */}\n      </div>\n    </div>\n  );\n};\n```\n\nCSS for print styling:\n```css\n@media print {\n  .print-only-hide {\n    display: none !important;\n  }\n  \n  body {\n    font-size: 12pt;\n  }\n  \n  .application-review {\n    page-break-inside: avoid;\n  }\n  \n  .section {\n    margin-bottom: 20pt;\n  }\n}\n```",
      "testStrategy": "1. Test PDF generation with complete form data\n2. Verify PDF layout and formatting\n3. Test print functionality and print CSS\n4. Verify PDF download functionality\n5. Test PDF generation with partial form data\n6. Verify PDF generation performance with large datasets\n7. Test accessibility of PDF generation and print controls\n8. Validate PDF content against form data",
      "priority": "high",
      "dependencies": [
        2,
        3,
        4,
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Implement Form Validation and Error Handling",
      "description": "Create comprehensive validation for all form fields and implement error handling",
      "details": "1. Create validation schemas for all form sections\n2. Implement client-side validation using Yup and React Hook Form\n3. Create reusable error display components\n4. Implement field-level and form-level validation\n5. Add validation on step transitions\n6. Create error summary component for form review\n\nExample implementation:\n```typescript\n// Validation schemas for all form sections\nexport const personalInfoSchema = yup.object({\n  firstName: yup.string().required('First name is required'),\n  middleName: yup.string(),\n  lastName: yup.string().required('Last name is required'),\n  dateOfBirth: yup.date()\n    .required('Date of birth is required')\n    .max(new Date(), 'Date cannot be in the future')\n    .test('age', 'Must be at least 18 years old', function(value) {\n      if (!value) return false;\n      const today = new Date();\n      const birthDate = new Date(value);\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      return age >= 18;\n    }),\n  email: yup.string().email('Invalid email format').required('Email is required'),\n  phone: yup.string()\n    .matches(/^[0-9]{10}$/, 'Phone number must be 10 digits')\n    .required('Phone number is required'),\n  currentAddress: yup.object({\n    street: yup.string().required('Street address is required'),\n    city: yup.string().required('City is required'),\n    state: yup.string().required('State is required'),\n    zipCode: yup.string()\n      .matches(/^[0-9]{5}(-[0-9]{4})?$/, 'Invalid ZIP code format')\n      .required('ZIP code is required')\n  }),\n  ssn: yup.string()\n    .matches(/^[0-9]{3}-[0-9]{2}-[0-9]{4}$/, 'Invalid SSN format (XXX-XX-XXXX)'),\n  idNumber: yup.string().required('ID number is required')\n});\n\n// Similar schemas for other form sections...\n\n// Error display component\nconst FormError = ({ error }) => {\n  if (!error) return null;\n  \n  return (\n    <p className=\"text-red-500 text-sm mt-1\">{error}</p>\n  );\n};\n\n// Form field wrapper with error handling\nconst FormField = ({ label, error, children }) => {\n  return (\n    <div className=\"mb-4\">\n      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n        {label}\n      </label>\n      {children}\n      <FormError error={error} />\n    </div>\n  );\n};\n\n// Error summary component\nconst ErrorSummary = ({ errors }) => {\n  if (Object.keys(errors).length === 0) return null;\n  \n  return (\n    <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\" role=\"alert\">\n      <div className=\"font-bold mb-1\">Please correct the following errors:</div>\n      <ul className=\"list-disc pl-5\">\n        {Object.entries(errors).map(([field, error]) => (\n          <li key={field}>{error.message}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Enhanced form step navigation with validation\nconst FormStepNavigation = ({ onNext, onPrev, isLastStep, isValid }) => {\n  return (\n    <div className=\"flex justify-between mt-6\">\n      <Button type=\"button\" variant=\"secondary\" onClick={onPrev}>\n        Previous\n      </Button>\n      <Button \n        type=\"submit\" \n        disabled={!isValid}\n        className={!isValid ? 'opacity-50 cursor-not-allowed' : ''}\n      >\n        {isLastStep ? 'Review Application' : 'Next'}\n      </Button>\n    </div>\n  );\n};\n```",
      "testStrategy": "1. Test validation for all required fields\n2. Verify error messages display correctly\n3. Test complex validations like age calculation and date ranges\n4. Verify form submission is prevented when validation fails\n5. Test error summary component with multiple errors\n6. Verify field-level error styling\n7. Test validation on step transitions\n8. Verify accessibility of error messages",
      "priority": "high",
      "dependencies": [
        3,
        4,
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement Accessibility and Responsive Design",
      "description": "Ensure the application is fully accessible and responsive across all devices",
      "details": "1. Implement WCAG 2.1 AA compliance standards\n2. Add proper ARIA attributes to all interactive elements\n3. Ensure keyboard navigation works throughout the application\n4. Implement focus management for form fields\n5. Create responsive layouts for all screen sizes\n6. Add high contrast mode support\n7. Implement screen reader compatibility\n\nExample implementation:\n```typescript\n// Accessible button component\nconst Button = ({ \n  children, \n  variant = 'primary', \n  type = 'button', \n  onClick, \n  disabled = false,\n  className = '',\n  ...props \n}) => {\n  const baseClasses = 'px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500'\n  };\n  \n  const classes = `${baseClasses} ${variantClasses[variant]} ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`;\n  \n  return (\n    <button\n      type={type}\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\n// Accessible form field\nconst TextField = ({ \n  label, \n  id, \n  error, \n  required = false,\n  ...props \n}) => {\n  const fieldId = id || `field-${Math.random().toString(36).substr(2, 9)}`;\n  const errorId = `${fieldId}-error`;\n  \n  return (\n    <div className=\"mb-4\">\n      <label \n        htmlFor={fieldId} \n        className=\"block text-sm font-medium text-gray-700 mb-1\"\n      >\n        {label}{required && <span className=\"text-red-500 ml-1\" aria-hidden=\"true\">*</span>}\n      </label>\n      <input\n        id={fieldId}\n        className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${error ? 'border-red-500' : 'border-gray-300'}`}\n        aria-invalid={error ? 'true' : 'false'}\n        aria-describedby={error ? errorId : undefined}\n        aria-required={required}\n        {...props}\n      />\n      {error && (\n        <p id={errorId} className=\"text-red-500 text-sm mt-1\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\n// Skip to content link for keyboard users\nconst SkipToContent = () => {\n  return (\n    <a\n      href=\"#main-content\"\n      className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-white p-4 z-50\"\n    >\n      Skip to main content\n    </a>\n  );\n};\n\n// Responsive layout component\nconst FormLayout = ({ children }) => {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <SkipToContent />\n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          <div className=\"bg-white rounded-lg shadow p-4 sm:p-6 md:p-8\">\n            <main id=\"main-content\">\n              {children}\n            </main>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// High contrast mode toggle\nconst HighContrastToggle = () => {\n  const [highContrast, setHighContrast] = useState(false);\n  \n  useEffect(() => {\n    if (highContrast) {\n      document.body.classList.add('high-contrast');\n    } else {\n      document.body.classList.remove('high-contrast');\n    }\n  }, [highContrast]);\n  \n  return (\n    <button\n      type=\"button\"\n      className=\"flex items-center text-sm\"\n      onClick={() => setHighContrast(!highContrast)}\n      aria-pressed={highContrast}\n    >\n      <span className=\"mr-2\">\n        {highContrast ? 'Disable' : 'Enable'} high contrast\n      </span>\n      <span className=\"w-10 h-5 bg-gray-200 rounded-full flex items-center transition-colors duration-200 ease-in-out\">\n        <span\n          className={`w-4 h-4 rounded-full transition-transform duration-200 ease-in-out transform ${highContrast ? 'translate-x-5 bg-blue-600' : 'translate-x-1 bg-white'}`}\n        />\n      </span>\n    </button>\n  );\n};\n```\n\nCSS for high contrast mode:\n```css\n.high-contrast {\n  --bg-primary: #000000;\n  --text-primary: #ffffff;\n  --border-primary: #ffffff;\n  --focus-color: #ffff00;\n}\n\n.high-contrast body {\n  background-color: var(--bg-primary);\n  color: var(--text-primary);\n}\n\n.high-contrast input,\n.high-contrast select,\n.high-contrast textarea {\n  background-color: #000000;\n  color: #ffffff;\n  border: 2px solid var(--border-primary);\n}\n\n.high-contrast button {\n  background-color: #000000;\n  color: #ffffff;\n  border: 2px solid var(--border-primary);\n}\n\n.high-contrast a {\n  color: #ffff00;\n  text-decoration: underline;\n}\n\n.high-contrast *:focus {\n  outline: 3px solid var(--focus-color) !important;\n  outline-offset: 2px !important;\n}\n```",
      "testStrategy": "1. Test keyboard navigation throughout the application\n2. Verify screen reader compatibility using NVDA, JAWS, and VoiceOver\n3. Test responsive design on various screen sizes (mobile, tablet, desktop)\n4. Validate WCAG 2.1 AA compliance using automated tools (Axe, Lighthouse)\n5. Perform manual accessibility testing for complex interactions\n6. Test high contrast mode functionality\n7. Verify focus management during form navigation\n8. Test form completion using only keyboard\n9. Validate color contrast ratios meet WCAG requirements",
      "priority": "high",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9
      ],
      "status": "pending",
      "subtasks": []
    }
  ],
  "metadata": {
    "created": "2025-06-16T21:20:14.145Z",
    "updated": "2025-06-16T21:20:14.145Z",
    "description": "Tasks for master context"
  }
}